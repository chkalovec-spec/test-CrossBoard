{"version":3,"sources":["components/ArrowsBlock/index.tsx","components/Board/index.tsx","utils/index.ts","Containers/App/index.tsx","App.tsx","index.tsx"],"names":["ArrowsBlock","onClickHandler","onClick","className","Board","crossArray","map","item","index","Math","random","winOptions","generateWinArray","array","winIndex","_","includes","AppContainer","useState","count","setCount","initalArray","Array","fill","generateStartArray","setCrossArray","direction","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAMaA,EAA0C,SAAC,GAAiC,IAAtBC,EAAqB,EAA9BC,QACxD,OACE,mCACE,sBAAKC,UAAU,cAAf,UACE,mBAAGA,UAAU,YAAYD,QAAS,kBAAMD,EAAe,SAAvD,oBAGA,mBAAGE,UAAU,aAAaD,QAAS,kBAAMD,EAAe,YAAxD,0BCLKG,G,MAA8B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC5C,OACE,mCACE,qBAAKF,UAAU,QAAf,SACGE,EAAWC,KAAI,SAACC,EAAMC,GACrB,OACE,qBAAKL,UAAU,OAAf,SACGI,GADH,UAA8BC,GAA9B,OAAsCC,KAAKC,oBCTjDC,EAAa,CACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IASIC,EAAmB,SAACC,EAAuBC,GACtD,OAAOD,EAAMP,KAAI,SAACS,EAAGP,GACnB,OAAOG,EAAWG,GAAUE,SAASR,GAAS,IAAM,OCjB3CS,EAAyB,WAAO,IAAD,EAChBC,mBAAS,GADO,mBACnCC,EADmC,KAC5BC,EAD4B,OAENF,mBDOJ,WAChC,IAAMG,EAAc,IAAIC,MAfP,GAeyBC,KAAK,IAE/C,OADAF,EAjBkB,GAiBS,IACpBA,ECVsDG,IAFnB,mBAEnCnB,EAFmC,KAEvBoB,EAFuB,KAgB1C,OACE,qCACE,cAAC,EAAD,CAAOpB,WAAYA,IACnB,cAAC,EAAD,CAAaH,QAfM,SAACwB,GACJ,SAAdA,GACFN,EAASD,EAAQ,GACbA,EAAQ,GAAGC,EAAS,GACxBK,EAAcb,EAAiBP,EAAYc,MAE3CC,EAASD,EAAQ,GACbA,EAAQ,GAAGC,EAAS,GACxBK,EAAcb,EAAiBP,EAAYc,YCNlCQ,G,MAVO,WACpB,OACE,mCACE,qBAAKxB,UAAU,YAAf,SACE,cAAC,EAAD,UCHRyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0398cd0a.chunk.js","sourcesContent":["import './style.css'\r\n\r\ntype ArrowsBlockProps = {\r\n  onClick: (direction: string) => void\r\n}\r\n\r\nexport const ArrowsBlock: React.FC<ArrowsBlockProps> = ({ onClick: onClickHandler }) => {\r\n  return (\r\n    <>\r\n      <div className='arrowsBlock'>\r\n        <p className='arrowLeft' onClick={() => onClickHandler('back')}>\r\n          ←\r\n        </p>\r\n        <p className='arrowRight' onClick={() => onClickHandler('forward')}>\r\n          →\r\n        </p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { crossArrayType } from '../../types'\r\n\r\nimport './style.css'\r\n\r\ntype BoardProps = {\r\n  crossArray: crossArrayType\r\n}\r\n\r\nexport const Board: React.FC<BoardProps> = ({ crossArray }) => {\r\n  return (\r\n    <>\r\n      <div className='board'>\r\n        {crossArray.map((item, index) => {\r\n          return (\r\n            <div className='cell' key={`${index}${Math.random()}`}>\r\n              {item}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { crossArrayType } from '../types'\r\n\r\nconst START_INDEX = 4\r\nconst BOARD_SIZE = 9\r\n\r\nconst winOptions = [\r\n  [0, 1, 2],\r\n  [0, 3, 6],\r\n  [0, 4, 8],\r\n  [1, 4, 7],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [2, 5, 8],\r\n  [2, 4, 6],\r\n  [6, 7, 8],\r\n]\r\n\r\nexport const generateStartArray = (): crossArrayType => {\r\n  const initalArray = new Array(BOARD_SIZE).fill('')\r\n  initalArray[START_INDEX] = 'X'\r\n  return initalArray\r\n}\r\n\r\nexport const generateWinArray = (array: crossArrayType, winIndex: number): crossArrayType => {\r\n  return array.map((_, index) => {\r\n    return winOptions[winIndex].includes(index) ? 'X' : ''\r\n  })\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { ArrowsBlock } from '../../components/ArrowsBlock'\r\nimport { Board } from '../../components/Board'\r\n\r\nimport { generateStartArray, generateWinArray } from '../../utils'\r\nimport { crossArrayType } from '../../types'\r\n\r\nexport const AppContainer: React.FC = () => {\r\n  const [count, setCount] = useState(0)\r\n  const [crossArray, setCrossArray] = useState<crossArrayType>(generateStartArray())\r\n\r\n  const onClickHandler = (direction: string) => {\r\n    if (direction === 'back') {\r\n      setCount(count - 1)\r\n      if (count < 1) setCount(8)\r\n      setCrossArray(generateWinArray(crossArray, count))\r\n    } else {\r\n      setCount(count + 1)\r\n      if (count > 7) setCount(0)\r\n      setCrossArray(generateWinArray(crossArray, count))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Board crossArray={crossArray} />\r\n      <ArrowsBlock onClick={onClickHandler} />\r\n    </>\r\n  )\r\n}\r\n","import { AppContainer } from './Containers/App'\n\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <div className='container'>\n        <AppContainer />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}